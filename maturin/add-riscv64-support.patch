commit 4ca5505845cebb078e21fd965423663a51f01fcc
Author: Felix Yan <felixonmars@archlinux.org>
Date:   Sun Jul 10 03:30:33 2022 +0300

    Add 64-bit RISC-V support
    
    Tested with `orjson` and it built fine with all tests passed on a
    riscv64 machine.
    
    This change is not sufficient though, because `ring` doesn't support
    riscv64 yet. I was building `maturin` against a custom version of `ring`
    to verify this change.
    
    Please let me know what could be done to move forward :)

diff --git a/src/auditwheel/policy.rs b/src/auditwheel/policy.rs
index 3d72b2a..65292ea 100644
--- a/src/auditwheel/policy.rs
+++ b/src/auditwheel/policy.rs
@@ -104,6 +104,7 @@ impl Policy {
                 Arch::X86 => "libc.musl-x86.so.1",
                 Arch::X86_64 => "libc.musl-x86_64.so.1",
                 Arch::S390X => "libc.musl-s390x.so.1",
+                Arch::Riscv64 => "libc.musl-riscv64.so.1",
             };
             if !new_soname.is_empty() {
                 self.lib_whitelist.insert(new_soname.to_string());
diff --git a/src/target.rs b/src/target.rs
index 6e3481f..42c068c 100644
--- a/src/target.rs
+++ b/src/target.rs
@@ -57,6 +57,7 @@ pub enum Arch {
     X86,
     X86_64,
     S390X,
+    Riscv64,
 }
 
 impl fmt::Display for Arch {
@@ -70,6 +71,7 @@ impl fmt::Display for Arch {
             Arch::X86 => write!(f, "i686"),
             Arch::X86_64 => write!(f, "x86_64"),
             Arch::S390X => write!(f, "s390x"),
+            Arch::Riscv64 => write!(f, "riscv64"),
         }
     }
 }
@@ -86,6 +88,7 @@ fn get_supported_architectures(os: &Os) -> Vec<Arch> {
             Arch::S390X,
             Arch::X86,
             Arch::X86_64,
+            Arch::Riscv64,
         ],
         Os::Windows => vec![Arch::X86, Arch::X86_64, Arch::Aarch64],
         Os::Macos => vec![Arch::Aarch64, Arch::X86_64],
@@ -163,6 +166,7 @@ impl Target {
             target_lexicon::Architecture::Powerpc64 => Arch::Powerpc64,
             target_lexicon::Architecture::Powerpc64le => Arch::Powerpc64Le,
             target_lexicon::Architecture::S390x => Arch::S390X,
+            target_lexicon::Architecture::Riscv64(_) => Arch::Riscv64,
             unsupported => bail!("The architecture {} is not supported", unsupported),
         };
 
@@ -324,6 +328,7 @@ impl Target {
             Arch::X86 => "i386",
             Arch::X86_64 => "x86_64",
             Arch::S390X => "s390x",
+            Arch::Riscv64 => "riscv64",
         }
     }
 
@@ -349,14 +354,14 @@ impl Target {
                 PlatformTag::manylinux2014()
             }
             Arch::X86 | Arch::X86_64 => PlatformTag::manylinux2010(),
-            Arch::Armv6L => PlatformTag::Linux,
+            Arch::Armv6L | Arch::Riscv64 => PlatformTag::Linux,
         }
     }
 
     /// Returns whether the platform is 64 bit or 32 bit
     pub fn pointer_width(&self) -> usize {
         match self.arch {
-            Arch::Aarch64 | Arch::Powerpc64 | Arch::Powerpc64Le | Arch::X86_64 | Arch::S390X => 64,
+            Arch::Aarch64 | Arch::Powerpc64 | Arch::Powerpc64Le | Arch::X86_64 | Arch::S390X | Arch::Riscv64 => 64,
             Arch::Armv6L | Arch::Armv7L | Arch::X86 => 32,
         }
     }
