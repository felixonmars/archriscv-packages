From 7f507b00cbdb5ae88196ea38994cced5685a8bdd Mon Sep 17 00:00:00 2001
From: Gurchetan Singh <gurchetansingh@google.com>
Date: Wed, 10 Jan 2024 15:09:02 -0800
Subject: [PATCH 24/26] vulkan/runtime: Split vk_object_list into separate file

Code movement: Move the object list + destroy_object
function to separate files.

This allows vk_command_buffer.{h, c} to not depend on all
of vk_meta, which depends on vk_pipeline, which depends on
NIR.

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/vulkan/runtime/meson.build         |  1 +
 src/vulkan/runtime/vk_command_buffer.h |  2 +-
 src/vulkan/runtime/vk_meta.c           | 58 +-----------------------
 src/vulkan/runtime/vk_meta.h           | 27 -----------
 src/vulkan/runtime/vk_object_list.c    | 62 ++++++++++++++++++++++++++
 src/vulkan/runtime/vk_object_list.h    | 45 +++++++++++++++++++
 6 files changed, 111 insertions(+), 84 deletions(-)
 create mode 100644 src/vulkan/runtime/vk_object_list.c
 create mode 100644 src/vulkan/runtime/vk_object_list.h

diff --git a/src/vulkan/runtime/meson.build b/src/vulkan/runtime/meson.build
index 762c29e97e7..428d25158ef 100644
--- a/src/vulkan/runtime/meson.build
+++ b/src/vulkan/runtime/meson.build
@@ -45,6 +45,7 @@ vulkan_lite_runtime_files = files(
   'vk_graphics_state.c',
   'vk_image.c',
   'vk_log.c',
+  'vk_object_list.c',
   'vk_object.c',
   'vk_physical_device.c',
   'vk_pipeline_layout.c',
diff --git a/src/vulkan/runtime/vk_command_buffer.h b/src/vulkan/runtime/vk_command_buffer.h
index 634ff1b69d6..848e5bd9ac2 100644
--- a/src/vulkan/runtime/vk_command_buffer.h
+++ b/src/vulkan/runtime/vk_command_buffer.h
@@ -27,7 +27,7 @@
 #include "vk_cmd_queue.h"
 #include "vk_graphics_state.h"
 #include "vk_log.h"
-#include "vk_meta.h"
+#include "vk_object_list.h"
 #include "vk_object.h"
 #include "util/list.h"
 #include "util/u_dynarray.h"
diff --git a/src/vulkan/runtime/vk_meta.c b/src/vulkan/runtime/vk_meta.c
index 970a6bf8632..7c6f8d65d07 100644
--- a/src/vulkan/runtime/vk_meta.c
+++ b/src/vulkan/runtime/vk_meta.c
@@ -74,36 +74,6 @@ cache_key_equal(const void *_a, const void *_b)
    return memcmp(a->key_data, b->key_data, a->key_size) == 0;
 }
 
-static void
-destroy_object(struct vk_device *device, struct vk_object_base *obj)
-{
-   const struct vk_device_dispatch_table *disp = &device->dispatch_table;
-   VkDevice _device = vk_device_to_handle(device);
-
-   switch (obj->type) {
-   case VK_OBJECT_TYPE_BUFFER:
-      disp->DestroyBuffer(_device, (VkBuffer)(uintptr_t)obj, NULL);
-      break;
-   case VK_OBJECT_TYPE_IMAGE_VIEW:
-      disp->DestroyImageView(_device, (VkImageView)(uintptr_t)obj, NULL);
-      break;
-   case VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT:
-      disp->DestroyDescriptorSetLayout(_device, (VkDescriptorSetLayout)(uintptr_t)obj, NULL);
-      break;
-   case VK_OBJECT_TYPE_PIPELINE_LAYOUT:
-      disp->DestroyPipelineLayout(_device, (VkPipelineLayout)(uintptr_t)obj, NULL);
-      break;
-   case VK_OBJECT_TYPE_PIPELINE:
-      disp->DestroyPipeline(_device, (VkPipeline)(uintptr_t)obj, NULL);
-      break;
-   case VK_OBJECT_TYPE_SAMPLER:
-      disp->DestroySampler(_device, (VkSampler)(uintptr_t)obj, NULL);
-      break;
-   default:
-      unreachable("Unsupported object type");
-   }
-}
-
 VkResult
 vk_meta_device_init(struct vk_device *device,
                     struct vk_meta_device *meta)
@@ -126,7 +96,7 @@ vk_meta_device_finish(struct vk_device *device,
 {
    hash_table_foreach(meta->cache, entry) {
       free((void *)entry->key);
-      destroy_object(device, entry->data);
+      vk_destroy_object(device, entry->data);
    }
    _mesa_hash_table_destroy(meta->cache, NULL);
    simple_mtx_destroy(&meta->cache_mtx);
@@ -190,7 +160,7 @@ vk_meta_cache_object(struct vk_device *device,
    if (entry != NULL) {
       /* We raced and found that object already in the cache */
       free(key);
-      destroy_object(device, obj);
+      vk_destroy_object(device, obj);
       return (uint64_t)(uintptr_t)entry->data;
    } else {
       /* Return the newly inserted object */
@@ -527,30 +497,6 @@ vk_meta_create_compute_pipeline(struct vk_device *device,
    return VK_SUCCESS;
 }
 
-void
-vk_object_list_init(struct vk_object_list *mol)
-{
-   util_dynarray_init(&mol->arr, NULL);
-}
-
-void
-vk_object_list_reset(struct vk_device *device,
-                          struct vk_object_list *mol)
-{
-   util_dynarray_foreach(&mol->arr, struct vk_object_base *, obj)
-      destroy_object(device, *obj);
-
-   util_dynarray_clear(&mol->arr);
-}
-
-void
-vk_object_list_finish(struct vk_device *device,
-                           struct vk_object_list *mol)
-{
-   vk_object_list_reset(device, mol);
-   util_dynarray_fini(&mol->arr);
-}
-
 VkResult
 vk_meta_create_buffer(struct vk_command_buffer *cmd,
                       struct vk_meta_device *meta,
diff --git a/src/vulkan/runtime/vk_meta.h b/src/vulkan/runtime/vk_meta.h
index 0120b636e63..8910c3fb1b6 100644
--- a/src/vulkan/runtime/vk_meta.h
+++ b/src/vulkan/runtime/vk_meta.h
@@ -27,7 +27,6 @@
 #include "vk_object.h"
 
 #include "util/simple_mtx.h"
-#include "util/u_dynarray.h"
 
 #ifdef __cplusplus
 extern "C" {
@@ -181,32 +180,6 @@ vk_meta_create_sampler(struct vk_device *device,
                        const void *key_data, size_t key_size,
                        VkSampler *sampler_out);
 
-struct vk_object_list {
-   struct util_dynarray arr;
-};
-
-void vk_object_list_init(struct vk_object_list *mol);
-void vk_object_list_reset(struct vk_device *device,
-                               struct vk_object_list *mol);
-void vk_object_list_finish(struct vk_device *device,
-                                struct vk_object_list *mol);
-
-static inline void
-vk_object_list_add_obj(struct vk_object_list *mol,
-                            struct vk_object_base *obj)
-{
-   util_dynarray_append(&mol->arr, struct vk_object_base *, obj);
-}
-
-static inline void
-vk_object_list_add_handle(struct vk_object_list *mol,
-                               VkObjectType obj_type,
-                               uint64_t handle)
-{
-   vk_object_list_add_obj(mol,
-      vk_object_base_from_u64_handle(handle, obj_type));
-}
-
 VkResult vk_meta_create_buffer(struct vk_command_buffer *cmd,
                                struct vk_meta_device *meta,
                                const VkBufferCreateInfo *info,
diff --git a/src/vulkan/runtime/vk_object_list.c b/src/vulkan/runtime/vk_object_list.c
new file mode 100644
index 00000000000..121aed23131
--- /dev/null
+++ b/src/vulkan/runtime/vk_object_list.c
@@ -0,0 +1,62 @@
+/*
+ * Copyright 2022 Collabora Ltd
+ * Copyright 2024 Google LLC
+ * SPDX-License-Identifier: MIT
+ */
+
+#include "vk_object_list.h"
+#include "vk_device.h"
+
+void
+vk_destroy_object(struct vk_device *device, struct vk_object_base *obj)
+{
+   const struct vk_device_dispatch_table *disp = &device->dispatch_table;
+   VkDevice _device = vk_device_to_handle(device);
+
+   switch (obj->type) {
+   case VK_OBJECT_TYPE_BUFFER:
+      disp->DestroyBuffer(_device, (VkBuffer)(uintptr_t)obj, NULL);
+      break;
+   case VK_OBJECT_TYPE_IMAGE_VIEW:
+      disp->DestroyImageView(_device, (VkImageView)(uintptr_t)obj, NULL);
+      break;
+   case VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT:
+      disp->DestroyDescriptorSetLayout(_device, (VkDescriptorSetLayout)(uintptr_t)obj, NULL);
+      break;
+   case VK_OBJECT_TYPE_PIPELINE_LAYOUT:
+      disp->DestroyPipelineLayout(_device, (VkPipelineLayout)(uintptr_t)obj, NULL);
+      break;
+   case VK_OBJECT_TYPE_PIPELINE:
+      disp->DestroyPipeline(_device, (VkPipeline)(uintptr_t)obj, NULL);
+      break;
+   case VK_OBJECT_TYPE_SAMPLER:
+      disp->DestroySampler(_device, (VkSampler)(uintptr_t)obj, NULL);
+      break;
+   default:
+      unreachable("Unsupported object type");
+   }
+}
+
+void
+vk_object_list_init(struct vk_object_list *mol)
+{
+   util_dynarray_init(&mol->arr, NULL);
+}
+
+void
+vk_object_list_reset(struct vk_device *device,
+                     struct vk_object_list *mol)
+{
+   util_dynarray_foreach(&mol->arr, struct vk_object_base *, obj)
+      vk_destroy_object(device, *obj);
+
+   util_dynarray_clear(&mol->arr);
+}
+
+void
+vk_object_list_finish(struct vk_device *device,
+                      struct vk_object_list *mol)
+{
+   vk_object_list_reset(device, mol);
+   util_dynarray_fini(&mol->arr);
+}
diff --git a/src/vulkan/runtime/vk_object_list.h b/src/vulkan/runtime/vk_object_list.h
new file mode 100644
index 00000000000..d393233f8ff
--- /dev/null
+++ b/src/vulkan/runtime/vk_object_list.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright 2022 Collabora Ltd
+ * Copyright 2024 Google LLC
+ * SPDX-License-Identifier: MIT
+ */
+
+#ifndef VK_META_OBJECT_LIST_H
+#define VK_META_OBJECT_LIST_H
+
+#include "vk_object.h"
+
+#include "util/u_dynarray.h"
+
+struct vk_device;
+
+struct vk_object_list {
+   struct util_dynarray arr;
+};
+
+void vk_object_list_init(struct vk_object_list *mol);
+void vk_object_list_reset(struct vk_device *device,
+                          struct vk_object_list *mol);
+void vk_object_list_finish(struct vk_device *device,
+                           struct vk_object_list *mol);
+
+static inline void
+vk_object_list_add_obj(struct vk_object_list *mol,
+                       struct vk_object_base *obj)
+{
+   util_dynarray_append(&mol->arr, struct vk_object_base *, obj);
+}
+
+static inline void
+vk_object_list_add_handle(struct vk_object_list *mol,
+                          VkObjectType obj_type,
+                          uint64_t handle)
+{
+   vk_object_list_add_obj(mol,
+      vk_object_base_from_u64_handle(handle, obj_type));
+}
+
+void vk_destroy_object(struct vk_device *device,
+                       struct vk_object_base *obj);
+
+#endif
-- 
2.46.0

