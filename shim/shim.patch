diff --git a/Cryptlib/Include/OpenSslSupport.h b/Cryptlib/Include/OpenSslSupport.h
index 0c2fb8b..9ef9ddc 100644
--- a/Cryptlib/Include/OpenSslSupport.h
+++ b/Cryptlib/Include/OpenSslSupport.h
@@ -70,6 +70,8 @@ WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
 #define SIXTY_FOUR_BIT
 #elif defined(MDE_CPU_IA32) || defined(MDE_CPU_ARM) || defined(MDE_CPU_EBC)
 #define THIRTY_TWO_BIT
+#elif defined(__riscv) && __riscv_xlen == 64
+#define SIXTY_FOUR_BIT
 #else
 #error Unknown target architecture
 #endif
diff --git a/Make.defaults b/Make.defaults
index 18677da..2a3d862 100644
--- a/Make.defaults
+++ b/Make.defaults
@@ -98,6 +98,15 @@ ifeq ($(ARCH),arm)
 	SUBSYSTEM		:= 0xa
 	ARCH_LDFLAGS		+= --defsym=EFI_SUBSYSTEM=$(SUBSYSTEM)
 endif
+ifeq ($(ARCH),riscv64)
+	ARCH_CFLAGS		?= -DMDE_CPU_RISCV64 -DPAGE_SIZE=4096 -mstrict-align
+	ARCH_GNUEFI		?= riscv64
+	ARCH_SUFFIX		?= rv64
+	ARCH_SUFFIX_UPPER	?= RV64
+	FORMAT			:= -O binary
+	SUBSYSTEM		:= 0xa
+	ARCH_LDFLAGS		+= --defsym=EFI_SUBSYSTEM=$(SUBSYSTEM)
+endif
 
 DEFINES		= -DDEFAULT_LOADER='L"$(DEFAULT_LOADER)"' \
 		  -DDEFAULT_LOADER_CHAR='"$(DEFAULT_LOADER)"'
diff --git a/elf_riscv64_efi.lds b/elf_riscv64_efi.lds
new file mode 100644
index 0000000..3bf2edb
--- /dev/null
+++ b/elf_riscv64_efi.lds
@@ -0,0 +1,87 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+
+OUTPUT_FORMAT("elf64-littleriscv", "elf64-littleriscv", "elf64-littleriscv")
+OUTPUT_ARCH(riscv)
+ENTRY(_start)
+SECTIONS {
+.text 0x0 :
+	{
+		_text = .;
+		*(.text.head)
+		*(.text)
+		*(.text.*)
+		*(.gnu.linkonce.t.*)
+		*(.srodata)
+		*(.rodata*)
+		. = ALIGN(16);
+	}
+	_etext = .;
+	_text_size = . - _text;
+.dynamic  :
+	{ *(.dynamic) }
+.data :
+	ALIGN(4096)
+	{
+		_data = .;
+		*(.sdata)
+		*(.data)
+		*(.data1)
+		*(.data.*)
+		*(.got.plt)
+		*(.got)
+
+		/* the EFI loader doesn't seem to like a .bss section, so we stick
+		   it all into .data: */
+		. = ALIGN(16);
+		_bss = .;
+		*(.sbss)
+		*(.scommon)
+		*(.dynbss)
+		*(.bss)
+		*(COMMON)
+		. = ALIGN(16);
+		_bss_end = .;
+	}
+
+.rela.text :
+	{ *(.rela.text) *(.rela.text*) }
+.rela.dyn :
+	{ *(.rela.dyn) }
+.rela.plt :
+	{ *(.rela.plt) }
+.rela.got :
+	{ *(.rela.got) }
+.rela.data :
+	{ *(.rela.data) *(.rela.data*) }
+	. = ALIGN(512);
+	_edata = .;
+	_data_size = . - _data;
+
+	. = ALIGN(4096);
+	.sbat :
+	{
+		_sbat = .;
+		*(.sbat)
+			*(.sbat.*)
+	}
+	_esbat = .;
+	_sbat_size = . - _sbat;
+
+	. = ALIGN(4096);
+.dynsym   :
+	{ *(.dynsym) }
+	. = ALIGN(4096);
+.dynstr   :
+	{ *(.dynstr) }
+	. = ALIGN(4096);
+.note.gnu.build-id :
+	{ *(.note.gnu.build-id) }
+/DISCARD/ :
+	{
+		*(.rel.reloc)
+		*(.eh_frame)
+		*(.note.GNU-stack)
+	}
+.comment 0 :
+	{ *(.comment) }
+}
diff --git a/include/asm.h b/include/asm.h
index 03b0655..331dabe 100644
--- a/include/asm.h
+++ b/include/asm.h
@@ -19,6 +19,8 @@ static inline uint64_t read_counter(void)
         __asm__ __volatile__ ("mrs %0, pmccntr_el0" : "=r" (val));
 #elif defined(__arm__)
         __asm__ __volatile__ ("mrc p15, 0, %0, c9, c13, 0" : "=r" (val));
+#elif defined(__riscv) && __riscv_xlen == 64
+        __asm__ __volatile__ ("rdcycle %0" : "=r" (val));
 #else
 #error unsupported arch
 #endif
diff --git a/include/peimage.h b/include/peimage.h
index 3b3f01a..9abf9b6 100644
--- a/include/peimage.h
+++ b/include/peimage.h
@@ -43,6 +43,7 @@
 #define IMAGE_FILE_MACHINE_X64             0x8664
 #define IMAGE_FILE_MACHINE_ARMTHUMB_MIXED  0x01c2
 #define IMAGE_FILE_MACHINE_ARM64	   0xaa64
+#define IMAGE_FILE_MACHINE_RISCV64         0x5064
 
 //
 // EXE file formats
diff --git a/include/system/stdarg.h b/include/system/stdarg.h
index 68c171b..253addb 100644
--- a/include/system/stdarg.h
+++ b/include/system/stdarg.h
@@ -24,7 +24,8 @@ typedef __builtin_va_list __builtin_sysv_va_list;
 #endif
 
 #if defined(__aarch64__) || defined(__arm__) || defined(__i386__) || \
-	defined(__i486__) || defined(__i686__) || defined(__COVERITY__)
+	defined(__i486__) || defined(__i686__) || defined(__COVERITY__) || \
+	defined(__riscv)
 
 typedef __builtin_va_list ms_va_list;
 typedef __builtin_va_list __builtin_ms_va_list;
diff --git a/include/test.h b/include/test.h
index 5261dbd..f8e3271 100644
--- a/include/test.h
+++ b/include/test.h
@@ -25,6 +25,8 @@
 #include <ia32/efibind.h>
 #elif defined(__x86_64__)
 #include <x86_64/efibind.h>
+#elif defined(__riscv) && __riscv_xlen == 64
+#include <riscv64/efibind.h>
 #else
 #error what arch is this
 #endif
diff --git a/pe.c b/pe.c
index 92c2804..7adb576 100644
--- a/pe.c
+++ b/pe.c
@@ -648,6 +648,8 @@ static const UINT16 machine_type =
 	IMAGE_FILE_MACHINE_I386;
 #elif defined(__ia64__)
 	IMAGE_FILE_MACHINE_IA64;
+#elif defined(__riscv) && __riscv_xlen == 64
+	IMAGE_FILE_MACHINE_RISCV64;
 #else
 #error this architecture is not supported by shim
 #endif
diff --git a/shim.h b/shim.h
index 69442da..e35886e 100644
--- a/shim.h
+++ b/shim.h
@@ -113,6 +113,21 @@
 #endif
 #endif
 
+#if defined(__riscv) && __riscv_xlen == 64
+#ifndef DEFAULT_LOADER
+#define DEFAULT_LOADER L"\\grubrv64.efi"
+#endif
+#ifndef DEFAULT_LOADER_CHAR
+#define DEFAULT_LOADER_CHAR "\\grubrv64.efi"
+#endif
+#ifndef EFI_ARCH
+#define EFI_ARCH L"rv64"
+#endif
+#ifndef DEBUGDIR
+#define DEBUGDIR L"/usr/lib/debug/usr/share/shim/rv64/"
+#endif
+#endif
+
 #if defined(__arm__)
 #ifndef DEFAULT_LOADER
 #define DEFAULT_LOADER L"\\grubarm.efi"
diff --git a/test-str.c b/test-str.c
index 9cb831d..dee9d10 100644
--- a/test-str.c
+++ b/test-str.c
@@ -719,7 +719,7 @@ test_strncmp(void)
 	 * This is still broken, and fails the test case as written on arm.
 	 * We no longer use this, so we do not strictly need to run it.
 	 */
-#if !defined(__arm__) && !defined(__aarch64__)
+#if !defined(__arm__) && !defined(__aarch64__) && !defined(__riscv)
 	/*
 	 * gnu-efi's broken strncmpa with the return type fixed
 	 */
