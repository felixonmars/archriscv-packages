--- PKGBUILD
+++ PKGBUILD
@@ -13,7 +13,9 @@ _gcc_patchset=4
 # shellcheck disable=SC2034
 pkgrel=1
 
+_build_profile=Release
 _major_ver=${pkgver%%.*}
+_electron="electron$_major_ver"
 if [[ ${_use_suffix} != 0 ]]; then
   pkgname="electron${_major_ver}"
 else
@@ -35,7 +37,7 @@ makedepends=('clang' 'git' 'gn' 'gperf' 'harfbuzz-icu' 'http-parser'
              'qt5-base' 'java-runtime-headless' 'libnotify' 'lld' 'llvm'
              'ninja' 'npm' 'pciutils' 'pipewire' 'python' 'python-httplib2'
              'python-requests' 'python-pyparsing' 'python-six' 'wget' 'yarn'
-             'patchutils')
+             'patchutils' 'go' 'p7zip' 'bazel' 'jdk11-openjdk' 'llvm')
 # shellcheck disable=SC2034
 optdepends=('kde-cli-tools: file deletion support (kioclient5)'
             'libappindicator-gtk3: StatusNotifierItem support'
@@ -85,6 +87,20 @@ source=("git+https://github.com/electron/electron.git#tag=v$pkgver"
         'v8-move-the-Stack-object-from-ThreadLocalTop.patch'
         'REVERT-roll-src-third_party-ffmpeg-m102.patch'
         'REVERT-roll-src-third_party-ffmpeg-m106.patch'
+        "partition-alloc-forward-add-cstdint.patch"
+        "$_electron-relax-constraints-on-VirtualCursor-layout.patch"
+        "$_electron-support-riscv64-in-electron_runtime_api_delegate.cc.patch"
+        "$_electron-extensions-common-api-runtime.json-support-riscv64.patch"
+        "$_electron-riscv-angle.patch"
+        "$_electron-riscv-sandbox.patch"
+        "$_electron-riscv-crashpad.patch"
+        "$_electron-riscv-dav1d.patch"
+        "$_electron-swiftshader-use-system-llvm.patch"
+        "$_electron-swiftshader-LLVMJIT-AddressSanitizerPass-dead-code-remove.patch"
+        "$_electron-swiftshader-llvm-15.patch"
+        "$_electron-gclient-ignore-prebuilt-platform-specific-deps.patch"
+        "$_electron-deps-parser.py"
+        "$_electron-patch-2c8a019f39d2-fix.patch"
        )
 # shellcheck disable=SC2034
 sha256sums=('SKIP'
@@ -119,7 +135,21 @@ sha256sums=('SKIP'
             'f41215af1f98d552cdfde7e924ba6d2f77883310aad57ebba7fe73d3883f8668'
             '49c3e599366909ddac6a50fa6f9420e01a7c0ffd029a20567a41d741a15ec9f7'
             '30df59a9e2d95dcb720357ec4a83d9be51e59cc5551365da4c0073e68ccdec44'
-            '4c12d31d020799d31355faa7d1fe2a5a807f7458e7f0c374adf55edb37032152')
+            '4c12d31d020799d31355faa7d1fe2a5a807f7458e7f0c374adf55edb37032152'
+            '772a25129d6770e4d03e7a9cc86e2bde3da5486762a88a655100d9d1518f3ed9'
+            '41eac75fca36730a13f8c368c8153a0db64ee80e11e97868fdbf0adf1d87d136'
+            'b2bee22e96fceb794bfe16a670251959ee9ca7c87ed5048c9eb6cebd6e3b4bc3'
+            '840947515347933da383408711696150cf8020b35d7abe1265b87084dfe1f3df'
+            'c9de0c6b9f3d8e2b47bbab635ab395671ada755f93c05c289678c9edc41f1e0c'
+            'be11a7d8808ceca5fea03c19bf54e8b767d697011a1fb1128aa46518e82eb7c5'
+            '85644fd6b1a64e7cf76f690f1427010cdf773938987f7e1a93b2977873707a4f'
+            '1806faa7a571f05f278215469a9ee248f1c4c420716bc8d5be4525fcf7373768'
+            'd901e905a9b4303e6334bf39475bcbcdf22959796954de66507857108d53570f'
+            'cf80c0d70f8933a4495c71d7be681c1457a69d26e95d2ad41da4bb02b7cbee4c'
+            '89db820524e8d524c86461ee4fa08433d361f40b42f1b5c488ebdaa0e0491990'
+            'b28b64181c46549e94e8c26d5401b0036991c18c60040c444a262484addd0d0d'
+            'cb8c2d8d620f95053e5de17b2234099b56c8ae6fa5868a38dbb0dbaf322e19a5'
+            'b49817246739c5792762b2de07082873a795a0245a585d99c78bd7a1762cb5f1')
 
 # Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
 # Keys are the names in the above script; values are the dependencies in Arch
@@ -183,14 +213,38 @@ EOF
   echo "Linking chromium from sources..."
   ln -s chromium-mirror src
 
+  echo "Building build tools that doesn't have prebuilt binaries for riscv64..."
+  export GOBIN="$HOME/bin"
+  export PATH="$PATH:$HOME/bin"
+
+  # Install the build tools
+  local infra_rev=$(python "$_electron-deps-parser.py" infra src/DEPS)
+  curl "https://chromium.googlesource.com/infra/infra/+/$infra_rev/DEPS?format=text" | base64 -d > DEPS_infra
+  local luci_go_rev=$(python "$_electron-deps-parser.py" luci_go DEPS_infra)
+  go install "go.chromium.org/luci/cipd/client/cmd/...@$luci_go_rev"
+
+  # Fix .cipd-bin problem
+  mkdir depot_tools/.cipd_bin
+  GOBIN=$(realpath depot_tools/.cipd_bin) go install "go.chromium.org/luci/auth/client/cmd/...@$luci_go_rev"
+
+  patch -Np0 -i $_electron-gclient-ignore-prebuilt-platform-specific-deps.patch
   depot_tools/gclient.py sync -D \
       --nohooks \
       --with_branch_heads \
       --with_tags
 
+  # Install esbuild (version needs to be locked, not feasible to add it to make dependencies)
+  local esbuild_ver=$(python "$_electron-deps-parser.py" esbuild src/DEPS)
+  GOBIN=$(realpath src/third_party/devtools-frontend/src/third_party/esbuild/) go install "github.com/evanw/esbuild/cmd/esbuild@v$esbuild_ver"
+
+  # Replace the bundled x86_64 JDK with system JDK11
+  rm -rf src/third_party/jdk/current
+  ln -s /usr/lib/jvm/java-11-openjdk src/third_party/jdk/current
+
   (
     cd src/electron || exit
     patch -Np1 -i ../../std-vector-non-const.patch
+    patch -Np1 -i ../../electron23-patch-2c8a019f39d2-fix.patch
   )
 
   echo "Running hooks..."
@@ -243,12 +297,28 @@ EOF
   patch -Np1  <../2039d5dff0cef8fe3841519f0418caef6ec47d2d.patch -d third_party/abseil-cpp
   filterdiff -p1 -x include/GLSLANG/ShaderLang.h < ../5d1ac2e0d5f61913aad62dadb65a7fea6f1b93ae.patch | patch -Np1 -d third_party/angle
   patch -Np1  <../dawn-tint-add-cstdint.patch -d third_party/dawn
+  patch -Np1 -i ../partition-alloc-forward-add-cstdint.patch # Perhaps only for testing build
 
   # https://crbug.com/v8/13630
   # https://crrev.com/c/4200636
   # https://github.com/nodejs/node/pull/46125#issuecomment-1407721276
   patch -Np1 -d v8 <../v8-move-the-Stack-object-from-ThreadLocalTop.patch
 
+  # Upstream fixes
+  patch -Np1 -i ../$_electron-relax-constraints-on-VirtualCursor-layout.patch
+
+  # RISC-V Patches
+  patch -Np1 -d third_party/crashpad/crashpad < "${srcdir}/$_electron-riscv-crashpad.patch"
+  patch -Np1 -i ../$_electron-riscv-angle.patch
+  patch -Np1 -i ../$_electron-riscv-sandbox.patch
+  patch -Np1 -i ../$_electron-riscv-dav1d.patch
+  patch -Np0 -i ../$_electron-support-riscv64-in-electron_runtime_api_delegate.cc.patch
+  patch -Np0 -i ../$_electron-extensions-common-api-runtime.json-support-riscv64.patch
+  # Build failes with the bundled LLVM 10.
+  patch -Np1 -i ../$_electron-swiftshader-use-system-llvm.patch
+  patch -Np1 -i ../$_electron-swiftshader-LLVMJIT-AddressSanitizerPass-dead-code-remove.patch
+  patch -Np0 -i ../$_electron-swiftshader-llvm-15.patch
+
   # Revert ffmpeg roll requiring new channel layout API support
   # https://crbug.com/1325301
   patch -Rp1 -i ../REVERT-roll-src-third_party-ffmpeg-m102.patch
@@ -303,6 +373,10 @@ build() {
   CXXFLAGS+=' -Wno-builtin-macro-redefined'
   CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='
 
+  # Remove flags that are causing weird bugs on riscv64
+  CFLAGS=${CFLAGS/-Wp,-D_FORTIFY_SOURCE=2}
+  CXXFLAGS=${CXXFLAGS/-Wp,-D_FORTIFY_SOURCE=2}
+
   # Let Chromium set its own symbol level
   CFLAGS=${CFLAGS/-g }
   CXXFLAGS=${CXXFLAGS/-g }
@@ -332,7 +406,6 @@ build() {
     host_toolchain = "//build/toolchain/linux/unbundle:default"
     clang_base_path = "/usr"
     clang_use_chrome_plugins = false
-    symbol_level = 0 # sufficient for backtraces on x86(_64)
     chrome_pgo_phase = 0
     treat_warnings_as_errors = false
     disable_fieldtrial_testing_config = true
@@ -346,17 +419,18 @@ build() {
     use_system_libffi = true
     icu_use_data_file = false
     is_component_ffmpeg = false
+    symbol_level = 1
   '
   gn gen out/Release \
-      --args="import(\"//electron/build/args/release.gn\") ${GN_EXTRA_ARGS}"
-  ninja -C out/Release electron
-  ninja -C out/Release electron_dist_zip
+      --args="import(\"//electron/build/args/${_build_profile,,}.gn\") ${GN_EXTRA_ARGS}"
+  ninja -C out/$_build_profile electron
+  ninja -C out/$_build_profile electron_dist_zip
   # ninja -C out/Release third_party/electron_node:headers
 }
 
 package() {
   install -dm755 "${pkgdir:?}/usr/lib/${pkgname}"
-  bsdtar -xf src/out/Release/dist.zip -C "${pkgdir}/usr/lib/${pkgname}"
+  bsdtar -xf src/out/$_build_profile/dist.zip -C "${pkgdir}/usr/lib/${pkgname}"
 
   chmod u+s "${pkgdir}/usr/lib/${pkgname}/chrome-sandbox"
 
