--- PKGBUILD
+++ PKGBUILD
@@ -17,6 +17,8 @@ pkgname="electron${_major_ver}"
 pkgdesc='Build cross platform desktop apps with web technologies'
 # shellcheck disable=SC2034
 arch=('x86_64')
+_build_profile=Release
+_electron="electron$_major_ver"
 # shellcheck disable=SC2034
 url='https://electronjs.org/'
 # shellcheck disable=SC2034
@@ -27,7 +29,8 @@ depends=('c-ares' 'gtk3' 'libevent' 'nss' 'libffi')
 makedepends=('clang' 'git' 'gn' 'gperf' 'harfbuzz-icu' 'http-parser'
              'qt5-base' 'java-runtime-headless' 'libnotify' 'lld' 'llvm'
              'ninja' 'npm' 'pciutils' 'pipewire' 'python' 'python-httplib2'
-             'python-requests' 'python-pyparsing' 'python-six' 'wget' 'yarn')
+             'python-requests' 'python-pyparsing' 'python-six' 'wget' 'yarn'
+             'go' 'p7zip' 'bazel' 'jdk17-openjdk' 'llvm')
 # shellcheck disable=SC2034
 optdepends=('kde-cli-tools: file deletion support (kioclient5)'
             'pipewire: WebRTC desktop sharing under Wayland'
@@ -49,6 +52,19 @@ source=("git+https://github.com/electron/electron.git#tag=v$pkgver"
         'add-some-typename-s-that-are-required-in-C-17.patch'
         'REVERT-disable-autoupgrading-debug-info.patch'
         'random-fixes-for-gcc13.patch'
+        'REVERT-problematic-signal-handling-workaround.patch'
+        "$_electron-support-riscv64-in-electron_runtime_api_delegate.cc.patch"
+        "$_electron-extensions-common-api-runtime.json-support-riscv64.patch"
+        "$_electron-riscv-angle.patch"
+        "$_electron-riscv-sandbox.patch"
+        "$_electron-riscv-crashpad.patch"
+        "$_electron-riscv-dav1d.patch"
+        "$_electron-riscv-base.patch"
+        "$_electron-swiftshader-use-system-llvm.patch"
+        "$_electron-swiftshader-LLVMJIT-AddressSanitizerPass-dead-code-remove.patch"
+        "$_electron-gclient-ignore-prebuilt-platform-specific-deps.patch"
+        "$_electron-deps-parser.py"
+        "$_electron-partition_alloc.gni-add-missing-riscv64-definition.patch"
        )
 # shellcheck disable=SC2034
 sha256sums=('SKIP'
@@ -62,7 +78,20 @@ sha256sums=('SKIP'
             '893bc04c7fceba2f0a7195ed48551d55f066bbc530ec934c89c55768e6f3949c'
             '621ed210d75d0e846192c1571bb30db988721224a41572c27769c0288d361c11'
             '1b782b0f6d4f645e4e0daa8a4852d63f0c972aa0473319216ff04613a0592a69'
-            'ba4dd0a25a4fc3267ed19ccb39f28b28176ca3f97f53a4e9f5e9215280040ea0')
+            'ba4dd0a25a4fc3267ed19ccb39f28b28176ca3f97f53a4e9f5e9215280040ea0'
+            '87d2c69292ac55ea1784f812c30acdbc341d4333d790fab3439a6b60393bb6c9'
+            '93b2d190448ed94b089eb6c577dba2b81e07d377c8195f76cba6995305d9ed14'
+            '840947515347933da383408711696150cf8020b35d7abe1265b87084dfe1f3df'
+            'a191ef5190e5f823e6be078df53ed1a888558673040985d79347a26644c39b63'
+            'a89ab6edda8dcc6349bd357ccb0d5bcd8e2b92a2c5891437e14008da3f2e7f88'
+            '85644fd6b1a64e7cf76f690f1427010cdf773938987f7e1a93b2977873707a4f'
+            '32811636eecd187dd386bbdd0fa1216728d6010f96fae8f1714dded04a95a5f4'
+            'aab631f5b6ea316b08bd290b52f60ed7715fceabd5c8de67535271fbbe2ae794'
+            'd901e905a9b4303e6334bf39475bcbcdf22959796954de66507857108d53570f'
+            'cf80c0d70f8933a4495c71d7be681c1457a69d26e95d2ad41da4bb02b7cbee4c'
+            'b28b64181c46549e94e8c26d5401b0036991c18c60040c444a262484addd0d0d'
+            '4b04b17c997b0f22b4d9ea1940809fbc29dea230c14643cf97a65a4e154bcb3a'
+            '8d8141ad3dd6d4ddc79e1c29e613d551d70ed5d9bb67c79538e7e80d89470420')
 
 # Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
 # Keys are the names in the above script; values are the dependencies in Arch
@@ -117,6 +146,10 @@ solutions = [
   },
 ]
 EOF
+ 
+  # Pin depot_tools
+  local _depot_tools_rev="$(python "$_electron-deps-parser.py" depot_tools chromium-mirror/DEPS)"
+  git -C depot_tools checkout $_depot_tools_rev
 
   export PATH+=":$PWD/depot_tools" DEPOT_TOOLS_UPDATE=0
   export VPYTHON_BYPASS='manually managed python not supported by chrome operations'
@@ -124,11 +157,35 @@ EOF
   echo "Linking chromium from sources..."
   ln -s chromium-mirror src
 
+  echo "Building build tools that doesn't have prebuilt binaries for riscv64..."
+  export GOBIN="$HOME/bin"
+  export PATH="$PATH:$HOME/bin"
+
+  # Install the build tools
+  local infra_rev=$(python "$_electron-deps-parser.py" infra src/DEPS)
+  curl "https://chromium.googlesource.com/infra/infra/+/$infra_rev/DEPS?format=text" | base64 -d > DEPS_infra
+  local luci_go_rev=$(python "$_electron-deps-parser.py" luci_go DEPS_infra)
+  go install "go.chromium.org/luci/cipd/client/cmd/...@$luci_go_rev"
+
+  # Fix .cipd-bin problem
+  mkdir -p depot_tools/.cipd_bin
+  GOBIN=$(realpath depot_tools/.cipd_bin) go install "go.chromium.org/luci/auth/client/cmd/...@$luci_go_rev"
+
+  patch -Np0 -i $_electron-gclient-ignore-prebuilt-platform-specific-deps.patch
+
   depot_tools/gclient.py sync -D \
       --nohooks \
       --with_branch_heads \
       --with_tags
 
+  # Install esbuild (version needs to be locked, not feasible to add it to make dependencies)
+  local esbuild_ver=$(python "$_electron-deps-parser.py" esbuild src/DEPS)
+  GOBIN=$(realpath src/third_party/devtools-frontend/src/third_party/esbuild/) go install "github.com/evanw/esbuild/cmd/esbuild@v$esbuild_ver"
+
+  # Replace the bundled x86_64 JDK with system JDK17
+  rm -rf src/third_party/jdk/current
+  ln -s /usr/lib/jvm/java-17-openjdk src/third_party/jdk/current
+
   pushd src/electron
   patch -Np1 -i ../../std-vector-non-const.patch
   popd
@@ -174,6 +231,24 @@ EOF
   patch -Np1 -i "${srcdir}/use-system-libraries-in-node.patch"
   patch -Np1 -i "${srcdir}/default_app-icon.patch"  # Icon from .desktop file
 
+  # Chromium Bug fixes
+  patch -R -p1 -i "${srcdir}/REVERT-problematic-signal-handling-workaround.patch"
+
+  # RISC-V Patches
+  patch -Np1 -d third_party/crashpad/crashpad < "${srcdir}/$_electron-riscv-crashpad.patch"
+  patch -Np1 -i ../$_electron-riscv-angle.patch
+  patch -Np1 -i ../$_electron-riscv-sandbox.patch
+  patch -Np1 -i ../$_electron-riscv-dav1d.patch
+  patch -Np1 -i ../$_electron-riscv-base.patch
+  patch -Np1 -d electron < ../$_electron-support-riscv64-in-electron_runtime_api_delegate.cc.patch
+  patch -Np0 -i ../$_electron-extensions-common-api-runtime.json-support-riscv64.patch
+  patch -Np1 -i ../$_electron-partition_alloc.gni-add-missing-riscv64-definition.patch
+
+  # Build failes with the bundled LLVM 10.
+  patch -Np1 -i ../$_electron-swiftshader-use-system-llvm.patch
+  patch -Np1 -i ../$_electron-swiftshader-LLVMJIT-AddressSanitizerPass-dead-code-remove.patch
+
+
   # Allow building against system libraries in official builds
   echo "Patching Chromium for using system libraries..."
   sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
@@ -205,11 +280,19 @@ build() {
   export AR=ar
   export NM=nm
 
+  # Disable RVV because the build of libyuv at this commit is broken on riscv.
+  CFLAGS+=' -D LIBYUV_DISABLE_RVV'
+  CXXFLAGS+=' -D LIBYUV_DISABLE_RVV'
+
   # Facilitate deterministic builds (taken from build/config/compiler/BUILD.gn)
   CFLAGS+='   -Wno-builtin-macro-redefined'
   CXXFLAGS+=' -Wno-builtin-macro-redefined'
   CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='
 
+  # Remove flags that are causing weird bugs on riscv64
+  CFLAGS=${CFLAGS/-Wp,-D_FORTIFY_SOURCE=2}
+  CXXFLAGS=${CXXFLAGS/-Wp,-D_FORTIFY_SOURCE=2}
+
   # Let Chromium set its own symbol level
   CFLAGS=${CFLAGS/-g }
   CXXFLAGS=${CXXFLAGS/-g }
@@ -239,7 +322,6 @@ build() {
     host_toolchain = "//build/toolchain/linux/unbundle:default"
     clang_base_path = "/usr"
     clang_use_chrome_plugins = false
-    symbol_level = 0 # sufficient for backtraces on x86(_64)
     chrome_pgo_phase = 0
     treat_warnings_as_errors = false
     disable_fieldtrial_testing_config = true
@@ -253,17 +335,18 @@ build() {
     use_system_libffi = true
     icu_use_data_file = false
     is_component_ffmpeg = false
+    symbol_level = 1
   '
-  gn gen out/Release \
-      --args="import(\"//electron/build/args/release.gn\") ${GN_EXTRA_ARGS}"
-  ninja -C out/Release electron
-  ninja -C out/Release electron_dist_zip
+  gn gen out/$_build_profile \
+      --args="import(\"//electron/build/args/${_build_profile,,}.gn\") ${GN_EXTRA_ARGS}"
+  ninja -C out/$_build_profile electron
+  ninja -C out/$_build_profile electron_dist_zip
   # ninja -C out/Release third_party/electron_node:headers
 }
 
 package() {
   install -dm755 "${pkgdir:?}/usr/lib/${pkgname}"
-  bsdtar -xf src/out/Release/dist.zip -C "${pkgdir}/usr/lib/${pkgname}"
+  bsdtar -xf src/out/$_build_profile/dist.zip -C "${pkgdir}/usr/lib/${pkgname}"
 
   chmod u+s "${pkgdir}/usr/lib/${pkgname}/chrome-sandbox"
 
