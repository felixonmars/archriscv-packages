diff --git a/Cargo.toml b/Cargo.toml
index 691daa7..b7ad5e1 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -25,11 +25,11 @@ bitflags = "1.0"
 dlib = "0.4"
 rusttype = "^0.9"
 chrono = "0.4"
-nix = "0.16"
+nix = "0.26"
 memmap = "0.7"
 os_pipe = "0.9"
-wayland-client = { version = "0.28"}
-wayland-protocols = { version = "0.28", features = ["client", "unstable_protocols"] }
+wayland-client = { version = "0.29" }
+wayland-protocols = { version = "0.29", features = ["client", "unstable_protocols"] }
 dbus = "0.6"
 fuzzy-matcher = "0.3"
 lazy_static = "1.4"
@@ -45,6 +45,6 @@ serde_json = { version = "1.0", optional = true }
 serde_yaml = { version = "0.8", optional = true }
 
 libpulse-binding = { version = "2.22", optional = true }
-alsa = { version = "0.4.0", optional = true }
+alsa = { version = "0.7.0", optional = true }
 fontconfig = "0.5.0"
 unicode-segmentation = "1.6.0"
diff --git a/src/app.rs b/src/app.rs
index bedd8bb..d3d5dc8 100644
--- a/src/app.rs
+++ b/src/app.rs
@@ -90,7 +90,7 @@ impl AppInner {
             _ => unreachable!(),
         });
 
-        shell_surface.set_keyboard_interactivity(1);
+        shell_surface.set_keyboard_interactivity(zwlr_layer_surface_v1::KeyboardInteractivity::Exclusive);
         shell_surface.set_size(1, 1);
         surface.set_buffer_scale(scale as i32);
         surface.commit();
diff --git a/src/doublemempool.rs b/src/doublemempool.rs
index d6871f0..20c0064 100644
--- a/src/doublemempool.rs
+++ b/src/doublemempool.rs
@@ -182,10 +182,9 @@ fn create_shm_fd() -> io::Result<RawFd> {
             memfd::MemFdCreateFlag::MFD_CLOEXEC,
         ) {
             Ok(fd) => return Ok(fd),
-            Err(nix::Error::Sys(Errno::EINTR)) => continue,
-            Err(nix::Error::Sys(Errno::ENOSYS)) => break,
-            Err(nix::Error::Sys(errno)) => return Err(io::Error::from(errno)),
-            Err(err) => unreachable!(err),
+            Err(Errno::EINTR) => continue,
+            Err(Errno::ENOSYS) => break,
+            Err(errno) => return Err(io::Error::from(errno)),
         }
     }
 
@@ -206,14 +205,12 @@ fn create_shm_fd() -> io::Result<RawFd> {
         ) {
             Ok(fd) => match mman::shm_unlink(mem_file_handle.as_str()) {
                 Ok(_) => return Ok(fd),
-                Err(nix::Error::Sys(errno)) => match unistd::close(fd) {
+                Err(errno) => match unistd::close(fd) {
                     Ok(_) => return Err(io::Error::from(errno)),
-                    Err(nix::Error::Sys(errno)) => return Err(io::Error::from(errno)),
-                    Err(err) => panic!("{}", err),
+                    Err(errno) => return Err(io::Error::from(errno)),
                 },
-                Err(err) => panic!("{}", err),
             },
-            Err(nix::Error::Sys(Errno::EEXIST)) => {
+            Err(Errno::EEXIST) => {
                 // If a file with that handle exists then change the handle
                 mem_file_handle = format!(
                     "/smithay-client-toolkit-{}",
@@ -221,9 +218,8 @@ fn create_shm_fd() -> io::Result<RawFd> {
                 );
                 continue;
             }
-            Err(nix::Error::Sys(Errno::EINTR)) => continue,
-            Err(nix::Error::Sys(errno)) => return Err(io::Error::from(errno)),
-            Err(err) => unreachable!(err),
+            Err(Errno::EINTR) => continue,
+            Err(errno) => return Err(io::Error::from(errno)),
         }
     }
 }
diff --git a/src/widgets/audio/alsa_sound.rs b/src/widgets/audio/alsa_sound.rs
index 76f0e3d..b271d4a 100644
--- a/src/widgets/audio/alsa_sound.rs
+++ b/src/widgets/audio/alsa_sound.rs
@@ -15,10 +15,7 @@ const SELEM_ID: u32 = 0u32;
 fn alsa_error_to_io_error(fail: &'static str, err: &alsa::Error) -> ::std::io::Error {
     let kind = ::std::io::ErrorKind::Other;
     let func = err.func();
-    let errno = err
-        .errno()
-        .map(|errno| format!("; errno = {}", errno))
-        .unwrap_or_default();
+    let errno = format!("; errno = {}", err.errno());
     ::std::io::Error::new(kind, format!("{}: {}{}", fail, func, errno))
 }
 
