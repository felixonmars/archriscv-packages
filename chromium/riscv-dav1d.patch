From 2961adb00c107519d7ce2bb63aa24dffd807e532 Mon Sep 17 00:00:00 2001
From: Levi Zim <rsworktech@outlook.com>
Date: Sun, 7 Sep 2025 12:58:14 +0800
Subject: [PATCH] [dav1d] Enable asm for linux riscv64

dav1d has riscv64 RVV extension support for a while now.
This CL enables RVV optimized assembly for riscv64.

dav1d has built-in cpu detection via HWCAPS so it will gracefully fall
back to generic code when RVV is not available.

config/linux/riscv64/cpu-renamed.c is created to avoid object name
collision with cpu.S.
---
 third_party/dav1d/BUILD.gn                    | 22 ++++-
 .../dav1d/config/linux/riscv64/config.h       | 96 +++++++++++++++++++
 .../dav1d/config/linux/riscv64/cpu-renamed.c  |  3 +
 .../dav1d/crossfiles/riscv64.crossfile        | 15 +++
 third_party/dav1d/dav1d_generated.gni         | 13 +++
 third_party/dav1d/generate_configs.py         |  2 +
 third_party/dav1d/generate_source.py          |  4 +
 7 files changed, 154 insertions(+), 1 deletion(-)
 create mode 100644 third_party/dav1d/config/linux/riscv64/config.h
 create mode 100644 third_party/dav1d/config/linux/riscv64/cpu-renamed.c
 create mode 100644 third_party/dav1d/crossfiles/riscv64.crossfile

diff --git a/third_party/dav1d/BUILD.gn b/third_party/dav1d/BUILD.gn
index 9348e15c3c000..5cc978710153f 100644
--- a/third_party/dav1d/BUILD.gn
+++ b/third_party/dav1d/BUILD.gn
@@ -17,7 +17,7 @@ if (is_win) {
   assert(current_cpu == "x64" && (is_linux || is_chromeos),
          "Only Linux X64 MSAN is supported")
   platform_config_root = "config/linux-noasm/$current_cpu"
-} else if (current_cpu == "riscv64" || current_cpu == "loong64" ||
+} else if (current_cpu == "loong64" ||
            current_cpu == "mipsel" || current_cpu == "mips64el" ||
            current_cpu == "ppc64") {
   platform_config_root = "config/linux-noasm/generic"
@@ -259,6 +259,24 @@ if (current_cpu == "x86" || current_cpu == "x64") {
 
     cflags = dav1d_copts
 
+    deps = [ ":dav1d_headers" ]
+    allow_circular_includes_from = [ ":dav1d_headers" ]
+  }
+} else if (current_cpu == "riscv64") {
+  static_library("dav1d_riscv") {
+    sources = [
+      "config/linux/riscv64/cpu-renamed.c",
+      "libdav1d/src/riscv/cpu.h",
+    ] + riscv64_asm_sources
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [
+      "//build/config/compiler:no_chromium_code",
+      ":dav1d_config",
+    ]
+
+    cflags = dav1d_copts
+
     deps = [ ":dav1d_headers" ]
     allow_circular_includes_from = [ ":dav1d_headers" ]
   }
@@ -293,5 +311,7 @@ static_library("dav1d") {
   } else if (current_cpu == "arm" || current_cpu == "arm64" ||
              current_cpu == "arm64e") {
     deps += [ ":dav1d_arm" ]
+  } else if (current_cpu == "riscv64") {
+    deps += [ ":dav1d_riscv" ]
   }
 }
diff --git a/third_party/dav1d/config/linux/riscv64/config.h b/third_party/dav1d/config/linux/riscv64/config.h
new file mode 100644
index 0000000000000..46acfa803beaa
--- /dev/null
+++ b/third_party/dav1d/config/linux/riscv64/config.h
@@ -0,0 +1,96 @@
+/*
+ * Autogenerated by the Meson build system.
+ * Do not edit, your changes will be lost.
+ */
+
+#pragma once
+
+#define ARCH_AARCH64 0
+
+#define ARCH_ARM 0
+
+#define ARCH_LOONGARCH 0
+
+#define ARCH_LOONGARCH32 0
+
+#define ARCH_LOONGARCH64 0
+
+#define ARCH_PPC64LE 0
+
+#define ARCH_RISCV 1
+
+#define ARCH_RV32 0
+
+#define ARCH_RV64 1
+
+#define ARCH_X86 0
+
+#define ARCH_X86_32 0
+
+#define ARCH_X86_64 0
+
+#define CONFIG_16BPC 1
+
+#define CONFIG_8BPC 1
+
+// #define CONFIG_LOG 1 -- Logging is controlled by Chromium
+
+#define CONFIG_MACOS_KPERF 0
+
+#define ENDIANNESS_BIG 0
+
+#define HAVE_ALIGNED_ALLOC 1
+
+#define HAVE_ASM 1
+
+#define HAVE_AS_ARCHEXT_DOTPROD_DIRECTIVE 0
+
+#define HAVE_AS_ARCHEXT_I8MM_DIRECTIVE 0
+
+#define HAVE_AS_ARCHEXT_SVE2_DIRECTIVE 0
+
+#define HAVE_AS_ARCHEXT_SVE_DIRECTIVE 0
+
+#define HAVE_AS_ARCH_DIRECTIVE 0
+
+#define HAVE_AS_FUNC 0
+
+#define HAVE_C11_GENERIC 1
+
+#define HAVE_CLOCK_GETTIME 1
+
+#define HAVE_DLSYM 1
+
+#define HAVE_DOTPROD 0
+
+#define HAVE_ELF_AUX_INFO 0
+
+#define HAVE_GETAUXVAL 1
+
+#define HAVE_I8MM 0
+
+#define HAVE_IO_H 0
+
+#define HAVE_MEMALIGN 1
+
+#define HAVE_POSIX_MEMALIGN 1
+
+// #define HAVE_PTHREAD_GETAFFINITY_NP 1 -- Controlled by Chomium
+
+#define HAVE_PTHREAD_NP_H 0
+
+// #define HAVE_PTHREAD_SETAFFINITY_NP 1 -- Controlled by Chomium
+
+#define HAVE_PTHREAD_SETNAME_NP 1
+
+#define HAVE_PTHREAD_SET_NAME_NP 0
+
+#define HAVE_SVE 0
+
+#define HAVE_SVE2 0
+
+#define HAVE_SYS_TYPES_H 1
+
+#define HAVE_UNISTD_H 1
+
+#define TRIM_DSP_FUNCTIONS 1
diff --git a/third_party/dav1d/config/linux/riscv64/cpu-renamed.c b/third_party/dav1d/config/linux/riscv64/cpu-renamed.c
new file mode 100644
index 0000000000000..4117ac3d18e90
--- /dev/null
+++ b/third_party/dav1d/config/linux/riscv64/cpu-renamed.c
@@ -0,0 +1,3 @@
+// Renamed from libdav1d/src/riscv/cpu.c to avoid object name conflict with
+// libdav1d/src/riscv/64/cpu.S
+#include "../../../libdav1d/src/riscv/cpu.c"
diff --git a/third_party/dav1d/crossfiles/riscv64.crossfile b/third_party/dav1d/crossfiles/riscv64.crossfile
new file mode 100644
index 0000000000000..f87185c379921
--- /dev/null
+++ b/third_party/dav1d/crossfiles/riscv64.crossfile
@@ -0,0 +1,15 @@
+[binaries]
+c = 'clang'
+ar = 'llvm-ar'
+
+# Copied from //third_party/ffmpeg's build_ffmpeg.py script. Does not use all
+# the cflags listed there since dav1d doesn't currently need such specificity.
+[built-in options]
+c_args = ['-march=rv64gc', '-mabi=lp64d', '--target=riscv64-linux-gnu']
+c_link_args = ['--target=riscv64-linux-gnu']
+
+[host_machine]
+system = 'linux'
+cpu_family = 'riscv64'
+cpu = 'riscv64'
+endian = 'little'
diff --git a/third_party/dav1d/dav1d_generated.gni b/third_party/dav1d/dav1d_generated.gni
index 4518b1f57f71c..e6aed512dac94 100644
--- a/third_party/dav1d/dav1d_generated.gni
+++ b/third_party/dav1d/dav1d_generated.gni
@@ -97,6 +97,19 @@ arm64_asm_sources = [
 ]
 
 arm_template_sources = []
+riscv64_asm_sources = [
+  "libdav1d/src/riscv/64/cdef.S",
+  "libdav1d/src/riscv/64/cdef16.S",
+  "libdav1d/src/riscv/64/cpu.S",
+  "libdav1d/src/riscv/64/ipred.S",
+  "libdav1d/src/riscv/64/ipred16.S",
+  "libdav1d/src/riscv/64/itx.S",
+  "libdav1d/src/riscv/64/mc.S",
+  "libdav1d/src/riscv/64/mc16.S",
+  "libdav1d/src/riscv/64/pal.S",
+  "libdav1d/src/riscv/asm.S",
+]
+
 template_sources = [
   "libdav1d/src/cdef_apply_tmpl.c",
   "libdav1d/src/cdef_tmpl.c",
diff --git a/third_party/dav1d/generate_configs.py b/third_party/dav1d/generate_configs.py
index 85db9acc9ea8b..aa1594d82b0a5 100755
--- a/third_party/dav1d/generate_configs.py
+++ b/third_party/dav1d/generate_configs.py
@@ -228,6 +228,8 @@ def main():
                    ['--cross-file', '../crossfiles/arm.crossfile'])
     GenerateConfig('config/linux/arm64', linux_env,
                    ['--cross-file', '../crossfiles/arm64.crossfile'])
+    GenerateConfig('config/linux/riscv64', linux_env,
+                   ['--cross-file', '../crossfiles/riscv64.crossfile'])
 
     win_x86_env = SetupWindowsCrossCompileToolchain('x86')
     GenerateConfig('config/win/x86', win_x86_env,
diff --git a/third_party/dav1d/generate_source.py b/third_party/dav1d/generate_source.py
index 65670b0f23fa4..d615b5f9d7ef7 100755
--- a/third_party/dav1d/generate_source.py
+++ b/third_party/dav1d/generate_source.py
@@ -56,6 +56,10 @@ def _WriteGn(fd):
         _Glob("libdav1d/src/arm/64/*_tmpl.S") + ["libdav1d/src/arm/64/util.S"])
     _WriteArray(fd, "arm_template_sources", _Glob("libdav1d/src/arm/*_tmpl.c"))
 
+    _WriteArray(
+        fd, "riscv64_asm_sources", _Glob("libdav1d/src/riscv/64/*.S")
+        + ["libdav1d/src/riscv/asm.S"])
+
     template_sources = _Glob("libdav1d/src/*_tmpl.c")
     _WriteArray(fd, "template_sources", template_sources)
 
-- 
2.51.0

