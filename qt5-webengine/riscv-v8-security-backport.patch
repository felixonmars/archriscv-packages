--- src/regexp/riscv64/regexp-macro-assembler-riscv64.cc.orig	2024-07-08 17:16:17.723123922 +0200
+++ src/regexp/riscv64/regexp-macro-assembler-riscv64.cc	2024-07-08 17:28:42.328290188 +0200
@@ -661,19 +661,20 @@
     __ li(a0, Operand(stack_limit));
     __ Ld(a0, MemOperand(a0));
     __ Sub64(a0, sp, a0);
+    Operand extra_space(num_registers_ * kPointerSize);
     // Handle it if the stack pointer is already below the stack limit.
     __ Branch(&stack_limit_hit, le, a0, Operand(zero_reg));
     // Check if there is room for the variable number of registers above
     // the stack limit.
     __ Branch(&stack_ok, Ugreater_equal, a0,
-              Operand(num_registers_ * kPointerSize));
+              extra_space);
     // Exit with OutOfMemory exception. There is not enough space on the stack
     // for our working registers.
     __ li(a0, Operand(EXCEPTION));
     __ jmp(&return_a0);
 
     __ bind(&stack_limit_hit);
-    CallCheckStackGuardState(a0);
+    CallCheckStackGuardState(a0, extra_space);
     // If returned value is non-zero, we exit with the returned value as result.
     __ Branch(&return_a0, ne, a0, Operand(zero_reg));
 
@@ -857,7 +858,7 @@
                                            current_character().bit() |
                                            backtrack_stackpointer().bit();
       __ MultiPush(regexp_registers_to_retain);
-      CallCheckStackGuardState(a0);
+      CallCheckStackGuardState(a0, extra_space);
       __ MultiPop(regexp_registers_to_retain);
       // If returning non-zero, we should end execution with the given
       // result as return value.
@@ -1056,7 +1057,7 @@
 
 // Private methods:
 
-void RegExpMacroAssemblerRISCV::CallCheckStackGuardState(Register scratch) {
+void RegExpMacroAssemblerRISCV::CallCheckStackGuardState(Register scratch, Operand extra_space) {
   DCHECK(!isolate()->IsGeneratingEmbeddedBuiltins());
   DCHECK(!masm_->options().isolate_independent_code);
 
@@ -1069,6 +1070,7 @@
   __ And(sp, sp, Operand(-stack_alignment));
   __ Sd(scratch, MemOperand(sp));
 
+  __ li(a3, extra_space);
   __ mv(a2, frame_pointer());
   // Code of self.
   __ li(a1, Operand(masm_->CodeObject()), CONSTANT_SIZE);
@@ -1129,7 +1131,8 @@
 
 int64_t RegExpMacroAssemblerRISCV::CheckStackGuardState(Address* return_address,
                                                         Address raw_code,
-                                                        Address re_frame) {
+                                                        Address re_frame,
+                                                        uintptr_t extra_space) {
   Code re_code = Code::cast(Object(raw_code));
   return NativeRegExpMacroAssembler::CheckStackGuardState(
       frame_entry<Isolate*>(re_frame, kIsolate),
@@ -1139,7 +1142,7 @@
       return_address, re_code,
       frame_entry_address<Address>(re_frame, kInputString),
       frame_entry_address<const byte*>(re_frame, kInputStart),
-      frame_entry_address<const byte*>(re_frame, kInputEnd));
+      frame_entry_address<const byte*>(re_frame, kInputEnd), extra_space);
 }
 
 MemOperand RegExpMacroAssemblerRISCV::register_location(int register_index) {
--- src/regexp/riscv64/regexp-macro-assembler-riscv64.h.orig	2024-07-08 17:10:55.261317262 +0200
+++ src/regexp/riscv64/regexp-macro-assembler-riscv64.h	2024-07-08 17:15:50.989364456 +0200
@@ -82,7 +82,7 @@
   // returning.
   // {raw_code} is an Address because this is called via ExternalReference.
   static int64_t CheckStackGuardState(Address* return_address, Address raw_code,
-                                      Address re_frame);
+                                      Address re_frame, uintptr_t extra_space);
 
   void print_regexp_frame_constants();
 
@@ -133,7 +133,7 @@
   void CheckStackLimit();
 
   // Generate a call to CheckStackGuardState.
-  void CallCheckStackGuardState(Register scratch);
+  void CallCheckStackGuardState(Register scratch, Operand extra_space = Operand(zero_reg));
 
   // The ebp-relative location of a regexp register.
   MemOperand register_location(int register_index);
